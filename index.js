const axios = require('axios');
const { EMA, RSI, MACD } = require('technicalindicators');

// ========== CONFIG ==========
const TELEGRAM_TOKEN = 'TOKEN_MU';
const TELEGRAM_CHAT_ID = 'CHAT_ID_MU';

const forexPairs = [
  'EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD',
  'USD/CHF', 'EUR/CHF', 'NZD/USD', 'USD/CAD',
  'EUR/GBP', 'GBP/JPY'
];

const cryptoCoins = [
  'bitcoin', 'ethereum', 'binancecoin', 'solana', 'ripple'
];

// API TwelveData (Forex)
const TWELVE_API_KEY = 'API_KEY_MU';

// Fetch helper
async function fetchForexHistory(pair) {
  try {
    const symbol = pair.replace('/', '');
    const url = `https://api.twelvedata.com/time_series?symbol=${symbol}&interval=1h&outputsize=100&apikey=${TWELVE_API_KEY}`;
    const res = await axios.get(url);
    return res.data.values.map(v => parseFloat(v.close)).reverse();
  } catch (err) {
    console.error(`Error Forex ${pair}:`, err.message);
    return [];
  }
}

async function fetchCryptoHistory(coin) {
  try {
    const url = `https://api.coingecko.com/api/v3/coins/${coin}/market_chart?vs_currency=usd&days=1&interval=hourly`;
    const res = await axios.get(url);
    return res.data.prices.map(p => p[1]);
  } catch (err) {
    console.error(`Error Crypto ${coin}:`, err.message);
    return [];
  }
}

function analyze(prices) {
  if (prices.length < 50) return null;

  const ema7 = EMA.calculate({ period: 7, values: prices });
  const ema14 = EMA.calculate({ period: 14, values: prices });
  const ema50 = EMA.calculate({ period: 50, values: prices });
  const rsi = RSI.calculate({ period: 14, values: prices });
  const macd = MACD.calculate({
    values: prices,
    fastPeriod: 12,
    slowPeriod: 26,
    signalPeriod: 9,
    SimpleMAOscillator: false,
    SimpleMASignal: false
  });

  const latestPrice = prices[prices.length - 1];
  const latestEMA7 = ema7[ema7.length - 1];
  const latestEMA14 = ema14[ema14.length - 1];
  const latestEMA50 = ema50[ema50.length - 1];
  const latestRSI = rsi[rsi.length - 1];
  const latestMACD = macd[macd.length - 1];

  // Basic strategy
  if (!latestMACD || !latestRSI) return null;

  if (latestEMA7 > latestEMA14 && latestEMA14 > latestEMA50 && latestRSI > 55 && latestMACD.MACD > latestMACD.signal) {
    return { action: 'BUY', price: latestPrice };
  } else if (latestEMA7 < latestEMA14 && latestEMA14 < latestEMA50 && latestRSI < 45 && latestMACD.MACD < latestMACD.signal) {
    return { action: 'SELL', price: latestPrice };
  } else {
    return null;
  }
}

async function sendTelegramMessage(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  try {
    await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message
    });
    console.log('Sinyal terkirim.');
  } catch (err) {
    console.error('Gagal kirim Telegram:', err.message);
  }
}

// Main process
(async () => {
  let message = "Sinyal Trading:\n";

  let hasSignal = false;

  for (const pair of forexPairs) {
    const prices = await fetchForexHistory(pair);
    const result = analyze(prices);
    if (result) {
      message += `Forex ${pair}: ${result.action} at ${result.price.toFixed(5)}\n`;
      hasSignal = true;
    }
  }

  for (const coin of cryptoCoins) {
    const prices = await fetchCryptoHistory(coin);
    const result = analyze(prices);
    if (result) {
      message += `Crypto ${coin.toUpperCase()}: ${result.action} at $${result.price.toFixed(2)}\n`;
      hasSignal = true;
    }
  }

  if (!hasSignal) {
    message = "Yah ga ada sinyal bosku.";
  }

  message += "\nAuto generated by SmartBot.";
  await sendTelegramMessage(message);
})();
