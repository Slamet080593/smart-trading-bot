const axios = require('axios');

// --- SETTINGAN ---
const TELEGRAM_TOKEN = '7086211397:AAGotudtgcHMhiS0d79k840IN_fMhH5QAnE';
const CHAT_ID = '1775772121';
const TWELVE_API_KEY = '6c8dca5076544546aabd5fb36c9895e2';

const forexPairs = [
  'EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'USD/CHF',
  'EUR/CHF', 'NZD/USD', 'USD/CAD', 'EUR/JPY', 'GBP/JPY'
];

const cryptoIds = ['bitcoin', 'ethereum', 'binancecoin', 'solana', 'ripple'];

// --- FUNGSI UTAMA ---
async function getForexData(pair) {
  try {
    const symbol = pair.replace('/', '');
    const url = `https://api.twelvedata.com/time_series?symbol=${symbol}&interval=1h&apikey=${TWELVE_API_KEY}&outputsize=50`;
    const response = await axios.get(url);
    return response.data.values.map(val => parseFloat(val.close)).reverse();
  } catch (err) {
    console.error(`Error Forex ${pair}:`, err.message);
    return null;
  }
}

async function getCryptoData(coinId) {
  try {
    const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart`, {
      params: {
        vs_currency: 'usd',
        days: 1,
        interval: 'hourly'
      },
      headers: {
        'User-Agent': 'Mozilla/5.0'
      }
    });
    return response.data.prices.map(price => price[1]);
  } catch (err) {
    console.error(`Error Crypto ${coinId}:`, err.message);
    return null;
  }
}

// --- TEKNIK ANALISA ---
function calculateRSI(prices, period = 14) {
  let gains = 0, losses = 0;
  for (let i = prices.length - period; i < prices.length - 1; i++) {
    const diff = prices[i + 1] - prices[i];
    if (diff >= 0) gains += diff;
    else losses -= diff;
  }
  if (losses === 0) return 100;
  const rs = gains / losses;
  return 100 - (100 / (1 + rs));
}

function calculateSMA(prices, period) {
  const slice = prices.slice(-period);
  const sum = slice.reduce((acc, val) => acc + val, 0);
  return sum / period;
}

function analyzeSignal(prices) {
  if (!prices || prices.length < 20) return null;
  
  const rsi = calculateRSI(prices);
  const smaShort = calculateSMA(prices, 5);
  const smaLong = calculateSMA(prices, 20);
  const lastPrice = prices[prices.length - 1];

  if (rsi < 30 && smaShort > smaLong) return { action: 'BUY', price: lastPrice };
  if (rsi > 70 && smaShort < smaLong) return { action: 'SELL', price: lastPrice };
  return null;
}

// --- TELEGRAM ---
async function sendTelegramMessage(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  await axios.post(url, {
    chat_id: CHAT_ID,
    text: message
  });
}

// --- MAIN ---
async function main() {
  let signals = [];

  for (let pair of forexPairs) {
    const data = await getForexData(pair);
    const signal = analyzeSignal(data);
    if (signal) {
      signals.push(`${signal.action} ${pair} at ${signal.price.toFixed(5)} ➔ Target ${(signal.price * (signal.action === 'BUY' ? 1.002 : 0.998)).toFixed(5)} (Hold 1-2 jam)`);
    }
  }

  for (let coin of cryptoIds) {
    const data = await getCryptoData(coin);
    const signal = analyzeSignal(data);
    if (signal) {
      signals.push(`${signal.action} ${coin.toUpperCase()} at ${signal.price.toFixed(2)} ➔ Target ${(signal.price * (signal.action === 'BUY' ? 1.02 : 0.98)).toFixed(2)} (Hold 1-2 jam)`);
    }
  }

  let message;
  if (signals.length === 0) {
    message = `yah ga ada sinyal bosku.`;
  } else {
    message = `Sinyal Trading:\n\n` + signals.map((s, i) => `${i + 1}. ${s}`).join('\n\n') + `\n\nAuto generated by SmartBot.`;
  }

  await sendTelegramMessage(message);
}

main();
