// ===== index.js FINAL =====

const axios = require('axios');

// Load dari environment variables (GitHub Secrets)
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TWELVE_API_KEY = process.env.TWELVE_API_KEY;

// Forex Pair
const forexPairs = ['EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'USD/CHF', 'EUR/CHF', 'NZD/USD', 'USD/CAD', 'XAU/USD', 'XAG/USD'];
// Crypto Coin
const cryptoCoins = ['bitcoin', 'ethereum', 'binancecoin', 'ripple', 'solana'];

// Threshold
const RSI_OVERSOLD = 30;
const RSI_OVERBOUGHT = 70;

// FUNCTION
async function getForexData(symbol) {
  try {
    const [base, quote] = symbol.split('/');
    const response = await axios.get(`https://api.twelvedata.com/time_series`, {
      params: {
        symbol: `${base}/${quote}`,
        interval: '1h',
        outputsize: 100,
        apikey: TWELVE_API_KEY
      }
    });
    return response.data.values.map(item => parseFloat(item.close));
  } catch (err) {
    console.error(`Error Forex ${symbol}:`, err.message);
    return null;
  }
}

async function getCryptoData(coinId) {
  try {
    const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart`, {
      params: {
        vs_currency: 'usd',
        days: 1,
        interval: 'hourly'
      }
    });
    return response.data.prices.map(price => price[1]);
  } catch (err) {
    console.error(`Error Crypto ${coinId}:`, err.message);
    return null;
  }
}

function calculateSMA(data, period = 14) {
  if (data.length < period) return null;
  const subset = data.slice(-period);
  const sum = subset.reduce((a, b) => a + b, 0);
  return sum / period;
}

function calculateRSI(data, period = 14) {
  if (data.length < period + 1) return null;
  let gains = 0, losses = 0;
  for (let i = data.length - period; i < data.length - 1; i++) {
    const diff = data[i + 1] - data[i];
    if (diff >= 0) gains += diff;
    else losses -= diff;
  }
  const rs = gains / (losses || 1);
  return 100 - (100 / (1 + rs));
}

function calculateMACD(data, shortPeriod = 12, longPeriod = 26) {
  if (data.length < longPeriod) return null;
  const shortEMA = calculateSMA(data.slice(-shortPeriod));
  const longEMA = calculateSMA(data.slice(-longPeriod));
  return shortEMA - longEMA;
}

async function analyze(symbol, data) {
  const rsi = calculateRSI(data);
  const macd = calculateMACD(data);
  const sma = calculateSMA(data);

  if (rsi === null || macd === null || sma === null) return null;

  if (rsi < RSI_OVERSOLD && macd > 0 && data[data.length - 1] > sma) {
    return { action: 'BUY', price: data[data.length - 1] };
  }
  if (rsi > RSI_OVERBOUGHT && macd < 0 && data[data.length - 1] < sma) {
    return { action: 'SELL', price: data[data.length - 1] };
  }
  return null;
}

async function main() {
  let messages = [];

  // Forex
  for (const pair of forexPairs) {
    const data = await getForexData(pair);
    if (!data) continue;
    const result = await analyze(pair, data);
    if (result) {
      messages.push(`${result.action} ${pair} at ${result.price.toFixed(5)} ➔ Target ${result.action == 'BUY' ? (result.price * 1.001).toFixed(5) : (result.price * 0.999).toFixed(5)} (Hold 1-2 jam)`);
    }
  }

  // Crypto
  for (const coin of cryptoCoins) {
    const data = await getCryptoData(coin);
    if (!data) continue;
    const result = await analyze(coin, data);
    if (result) {
      messages.push(`${result.action} ${coin.toUpperCase()} at ${result.price.toFixed(2)} ➔ Target ${result.action == 'BUY' ? (result.price * 1.01).toFixed(2) : (result.price * 0.99).toFixed(2)} (Hold 1-2 jam)`);
    }
  }

  let finalMessage = '';

  if (messages.length > 0) {
    finalMessage = `Sinyal Trading:\n\n${messages.map((m, i) => `${i + 1}. ${m}`).join('\n')}\n\nAuto generated by SmartBot.`;
  } else {
    finalMessage = `yah ga ada sinyal bosku.\n\nAuto generated by SmartBot.`;
  }

  await sendTelegram(finalMessage);
}

async function sendTelegram(text) {
  try {
    await axios({
      url: `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
      method: 'POST',
      data: {
        chat_id: TELEGRAM_CHAT_ID,
        text: text
      }
    });
  } catch (err) {
    console.error('Error kirim Telegram:', err.message);
  }
}

main();
