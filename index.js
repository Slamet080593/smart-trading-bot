require('dotenv').config();
const axios = require('axios');
const ti = require('technicalindicators');

// API config
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// Forex pairs
const forexPairs = [
  'EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CHF', 'EUR/CHF',
  'AUD/USD', 'NZD/USD', 'EUR/JPY', 'GBP/JPY', 'AUD/JPY'
];

// Crypto coins
const cryptoCoins = [
  'bitcoin', 'ethereum', 'binancecoin', 'solana', 'ripple'
];

// TP/SL setting
const forexTP = 30; // 30 pips
const forexSL = 20; // 20 pips
const cryptoTP = 3; // 3%
const cryptoSL = 1.5; // 1.5%

async function getForexData(pair) {
  try {
    const response = await axios.get(`https://api.twelvedata.com/time_series?symbol=${pair.replace('/', '')}&interval=1h&apikey=demo`);
    const values = response.data.values;
    if (!values) throw new Error('Data kosong');
    return values.map(item => parseFloat(item.close)).reverse();
  } catch (error) {
    console.error(`Error Forex ${pair}: ${error.message}`);
    return null;
  }
}

async function getCryptoData(coin) {
  try {
    const response = await axios.get(`https://api.binance.com/api/v3/klines?symbol=${coin.toUpperCase()}USDT&interval=1h`);
    const prices = response.data.map(candle => parseFloat(candle[4])); // close price
    return prices.reverse();
  } catch (error) {
    console.error(`Error Crypto ${coin}: ${error.message}`);
    return null;
  }
}

function analyzeData(prices) {
  const sma = ti.SMA.calculate({ period: 14, values: prices });
  const rsi = ti.RSI.calculate({ period: 14, values: prices });
  const macd = ti.MACD.calculate({
    fastPeriod: 12,
    slowPeriod: 26,
    signalPeriod: 9,
    SimpleMAOscillator: false,
    SimpleMASignal: false,
    values: prices
  });

  const latestPrice = prices[prices.length - 1];
  const latestSMA = sma[sma.length - 1];
  const latestRSI = rsi[rsi.length - 1];
  const latestMACD = macd[macd.length - 1];

  let signal = null;

  if (latestPrice > latestSMA && latestRSI > 50 && latestMACD.MACD > latestMACD.signal) {
    signal = 'BUY';
  } else if (latestPrice < latestSMA && latestRSI < 50 && latestMACD.MACD < latestMACD.signal) {
    signal = 'SELL';
  }

  return signal;
}

async function sendTelegram(message) {
  try {
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'HTML'
    });
    console.log('Sinyal terkirim!');
  } catch (error) {
    console.error('Gagal kirim Telegram:', error.message);
  }
}

async function main() {
  let messages = [];
  
  // Forex analysis
  for (const pair of forexPairs) {
    const prices = await getForexData(pair);
    if (prices) {
      const signal = analyzeData(prices);
      if (signal) {
        messages.push(`<b>Forex ${pair}</b>\nSinyal: ${signal}\nTP: ${forexTP} pips\nSL: ${forexSL} pips`);
      }
    }
  }

  // Crypto analysis
  for (const coin of cryptoCoins) {
    const prices = await getCryptoData(coin);
    if (prices) {
      const signal = analyzeData(prices);
      if (signal) {
        messages.push(`<b>Crypto ${coin.toUpperCase()}</b>\nSinyal: ${signal}\nTP: ${cryptoTP}%\nSL: ${cryptoSL}%`);
      }
    }
  }

  if (messages.length === 0) {
    await sendTelegram('Yah ga ada sinyal bosku.');
  } else {
    const fullMessage = `Sinyal Trading:\n\n${messages.join('\n\n')}\n\nAuto generated by SmartBot.`;
    await sendTelegram(fullMessage);
  }
}

main();
