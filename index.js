const axios = require('axios');

// Ambil API Key dari Environment (Secret Github)
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TWELVE_API_KEY = process.env.TWELVE_API_KEY;

const forexPairs = [
  'EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CHF', 'EUR/CHF',
  'AUD/USD', 'NZD/USD', 'EUR/JPY', 'GBP/JPY', 'AUD/JPY'
];

const cryptoList = [
  'bitcoin', 'ethereum', 'binancecoin', 'solana', 'ripple'
];

async function getForexData(pair) {
  try {
    const symbol = pair.replace('/', '');
    const response = await axios.get(`https://api.twelvedata.com/time_series`, {
      params: {
        symbol: symbol,
        interval: '1h',
        apikey: TWELVE_API_KEY
      }
    });

    if (response.data && response.data.values) {
      return response.data.values;
    } else {
      console.error(`Error Forex ${pair}: Data kosong`);
      return null;
    }
  } catch (error) {
    console.error(`Error Forex ${pair}:`, error.message);
    return null;
  }
}

async function getCryptoData(coin) {
  try {
    const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${coin}/market_chart`, {
      params: {
        vs_currency: 'usd',
        days: '1',
        interval: 'hourly'
      }
    });

    if (response.data && response.data.prices) {
      return response.data.prices.map(p => ({
        datetime: new Date(p[0]).toISOString(),
        close: p[1]
      }));
    } else {
      console.error(`Error Crypto ${coin}: Data kosong`);
      return null;
    }
  } catch (error) {
    console.error(`Error Crypto ${coin}:`, error.message);
    return null;
  }
}

function calculateSignal(data) {
  if (!data || data.length < 20) return null;

  const closes = data.map(item => parseFloat(item.close));
  const latestClose = closes[closes.length - 1];
  const sma10 = closes.slice(-10).reduce((a, b) => a + b, 0) / 10;
  const sma20 = closes.slice(-20).reduce((a, b) => a + b, 0) / 20;

  if (latestClose > sma10 && sma10 > sma20) {
    return 'BUY';
  } else if (latestClose < sma10 && sma10 < sma20) {
    return 'SELL';
  }
  return null;
}

async function main() {
  let message = 'Sinyal Trading:\n';
  let foundSignal = false;

  for (const pair of forexPairs) {
    const data = await getForexData(pair);
    const signal = calculateSignal(data);
    if (signal) {
      foundSignal = true;
      message += `${signal} ${pair} ➔ Hold 1-2 jam\n`;
    }
  }

  for (const coin of cryptoList) {
    const data = await getCryptoData(coin);
    const signal = calculateSignal(data);
    if (signal) {
      foundSignal = true;
      message += `${signal} ${coin.toUpperCase()} ➔ Hold 1-2 jam\n`;
    }
  }

  if (!foundSignal) {
    message = 'Yah ga ada sinyal bosku.';
  } else {
    message += '\nAuto generated by SmartBot.';
  }

  await sendTelegram(message);
}

async function sendTelegram(message) {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
    await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message
    });
    console.log('Sinyal terkirim!');
  } catch (error) {
    console.error('Gagal kirim Telegram:', error.message);
  }
}

main();
