const axios = require('axios');
const TelegramBotToken = '7086211397:AAGotudtgcHMhiS0d79k840IN_fMhH5QAnE';
const TelegramChatId = '1775772121';

// List pair forex dan crypto
const forexPairs = ['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'EURCHF', 'NZDUSD', 'GBPJPY', 'EURJPY'];
const cryptoPairs = ['bitcoin', 'ethereum', 'binancecoin', 'solana', 'cardano'];

async function getForexData(pair) {
  try {
    const apiKey = '6c8dca5076544546aabd5fb36c9895e2'; // Twelve API
    const response = await axios.get(`https://api.twelvedata.com/time_series?symbol=${pair}&interval=1h&apikey=${apiKey}`);
    return response.data?.values;
  } catch (err) {
    console.log(`Error Forex ${pair}: ${err.message}`);
    return null;
  }
}

async function getCryptoData(coin) {
  try {
    const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${coin}/market_chart?vs_currency=usd&days=1&interval=hourly`);
    const prices = response.data?.prices?.map(p => ({
      datetime: new Date(p[0]).toISOString(),
      close: p[1]
    }));
    return prices;
  } catch (err) {
    console.log(`Error Crypto ${coin}: ${err.message}`);
    return null;
  }
}

function calculateRSI(data) {
  if (!data || data.length < 15) return null;

  let gains = 0;
  let losses = 0;
  for (let i = 1; i < 15; i++) {
    const diff = data[i].close - data[i - 1].close;
    if (diff >= 0) gains += diff;
    else losses -= diff;
  }
  const avgGain = gains / 14;
  const avgLoss = losses / 14;

  const rs = avgGain / avgLoss;
  const rsi = 100 - (100 / (1 + rs));
  return rsi;
}

function calculateMACD(data) {
  if (!data || data.length < 26) return null;

  const ema = (data, period) => {
    const k = 2 / (period + 1);
    return data.reduce((acc, val, idx) => {
      if (idx === 0) return [val.close];
      acc.push(val.close * k + acc[idx - 1] * (1 - k));
      return acc;
    }, []);
  };

  const ema12 = ema(data.slice(-26), 12);
  const ema26 = ema(data.slice(-26), 26);
  const macdLine = ema12.map((val, idx) => val - ema26[idx]);
  const signalLine = ema(macdLine.map(v => ({ close: v })), 9);

  const lastMACD = macdLine[macdLine.length - 1];
  const lastSignal = signalLine[signalLine.length - 1];
  return lastMACD - lastSignal;
}

async function analyze() {
  let message = "Sinyal Trading:\n";

  for (const pair of forexPairs) {
    const data = await getForexData(pair);
    if (data) {
      const rsi = calculateRSI(data);
      const macd = calculateMACD(data);

      if (rsi && macd) {
        if (rsi < 30 && macd > 0) {
          message += `1. BUY ${pair} (RSI ${rsi.toFixed(2)}, MACD ${macd.toFixed(4)})\n`;
        } else if (rsi > 70 && macd < 0) {
          message += `1. SELL ${pair} (RSI ${rsi.toFixed(2)}, MACD ${macd.toFixed(4)})\n`;
        }
      }
    }
  }

  for (const coin of cryptoPairs) {
    const data = await getCryptoData(coin);
    if (data) {
      const rsi = calculateRSI(data);
      const macd = calculateMACD(data);

      if (rsi && macd) {
        if (rsi < 30 && macd > 0) {
          message += `1. BUY ${coin.toUpperCase()} (RSI ${rsi.toFixed(2)}, MACD ${macd.toFixed(4)})\n`;
        } else if (rsi > 70 && macd < 0) {
          message += `1. SELL ${coin.toUpperCase()} (RSI ${rsi.toFixed(2)}, MACD ${macd.toFixed(4)})\n`;
        }
      }
    }
  }

  message += "\nAuto generated by SmartBot.";
  await sendTelegram(message);
}

async function sendTelegram(text) {
  try {
    await axios.get(`https://api.telegram.org/bot${TelegramBotToken}/sendMessage`, {
      params: {
        chat_id: TelegramChatId,
        text
      }
    });
    console.log("Pesan dikirim ke Telegram!");
  } catch (err) {
    console.error("Gagal kirim ke Telegram:", err.message);
  }
}

// Jalankan analisa
analyze();
